Link Components to GUI elements (the more complex of which would open submenus); would allow for a simple list of components

Add text input filters...
...boolean
...math



Create a custom entity handler to track all custom entities and their data, partially because it will make these things easier...
...dead entities and their respawning
...inheritance system
...general tracking of custom entities and ability to edit them

Save entities to file + data structure when dead, outside the normal MC systems



Define the GUI; if we're working with an existing, non-custom entity, highlight custom-only stuff in yellow, as well as the "Convert" button
If you press "Save" button for existing non-custom entity, and have changed custom-only settings, show a warning message
...File tab (see below)
...Main tab (parent entity, name, title, hp, armor, speed, xp, faction)
...Inventory tab (also includes drops)
...Spawning tab (home dim/position/look vector, respawn cooldown, respawn conditions <time of day, moon phase>)
...AI tab (holy crap...see below)
...Physics & Rendering tab (pathfinding type, base hitbox w/h, base render scale x/y/z, global scaling w/h, visibility, texture, draw mode, blend)
...Attributes & Potions tab
...Events tab (respawn, death, damage taken, damage dealt, healed, right clicked)

File tab
Inheritance map: list of entity template groups, entity templates, and existing custom entities
List of existing custom entities (sortable by distance <default>, name, faction, parent); always has special entries at the top (new entity)
create/save, load, delete

AI Tab
targeting conditions (targetTasks)
combat actions (tasks, high priority) (actions, conditions <hp, cooldown>)
idle actions (tasks, low priority) (stand/look / wander (w/ option for step-up/down and area) / patrol route, animation)



Action GUI
preview of action
a series of timed nodes, each of which is a time and scripting to run



Setting/scripting keywords...
...other / o
...parent / p

Scripting vars...
...x, y, z
...xSpeed, ySpeed, zSpeed

Scripting methods (some arguments can be left blank)...
...command(command)
...setAction(action, time)
...setMotion(x, y, z)
...addMotion(x, y, z)
...setTransforms(modelPart, transforms...)
.....translate(x, y, z)
.....scale(x, y, z)
.....rotate(x, y, z)
.....blend(r, g, b, a)
...dealDamage(hitbox, amount, type)
...projectile(texture (resourceLocation of item or texture), number, accuracy, speed, arc, gravity, damage, potion effects, terrainImpactSound, entityImpactSound)
...entity spawns
...potion effect applications
...sound effects



Inheritance system for stats and for other things; use "p" to signify the parent value...
...math parse for int/long/float/double eg. "p", "p * 2", "20"
...bool parse for booleans eg. "p", "!p", "true"
...string parse for strings eg. <p>, <"prefix" + p + "suffix">, <"Goblin">




Notes:
getCollisionBoundingBox() returns the entity's *solid* collision bounding box; it's generally not used for living entities, but rather for eg. boats
getEntityBoundingBox() returns the normal collision bounding box generally used for living entities



Low priority:
Look into multiple hitboxes if a situation comes up where they'd be useful...
...could be good for worm-type enemies
...might end up being a multi-entity thing rather than just a multi-hitbox thing though
